#pragma once
#include <string>
#include <utility>
#include <map>
#include <utility>
#include <functional>


template <class T_CommunicationPolicy, typename T_Node>
class Communicator : public T_CommunicationPolicy {
public:
    typedef T_Node Node;

private:
    typedef T_CommunicationPolicy CommunicationPolicy;
    typedef typename CommunicationPolicy::URI URI;
    typedef typename Node::UUID               UUID;
    std::map<UUID, URI> uriMap;

public:

    template <typename T_Data = char>
    struct Channel {
	Channel(Node src, Node dest, size_t size, T_Data* data) :
	    src(src), dest(dest), size(size), data(data){}

	Node src;
	Node dest;
	size_t size;
	T_Data* data;

    };

    Communicator() : CommunicationPolicy(){

    }

    void announce(const Node node, std::function<void(UUID)> callback){
	uriMap.insert(std::pair<UUID, URI>(node.uuid, CommunicationPolicy::uri));
	callback(node.uuid);

    }

    void send(Channel<char> channel){
	const unsigned context = 0;
	const unsigned descr = 0;
	URI destURI = uriMap[channel.dest.uuid];
	CommunicationPolicy::sendData(channel.data, channel.size, destURI, context, descr);
    }

};

