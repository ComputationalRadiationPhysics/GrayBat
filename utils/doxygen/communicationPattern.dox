/**

\page communicationPattern Communication Pattern

[cage]: @ref cage 

A communication pattern is a class functor which generates
a graph. They are used to define the communication graph of a
[cage]. GrayBat provides a handful of predefined pattern:

- graybat::pattern::FullyConnected
- graybat::pattern::GridDiagonal
- graybat::pattern::Grid
- graybat::pattern::HyperCube
- graybat::pattern::InStar
- graybat::pattern::OutStar
- graybat::pattern::BiStar
- graybat::pattern::EdgeLess
- graybat::pattern::Ring
- graybat::pattern::None

Own communication pattern can be build from the following pattern
skeleton:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.cc}
namespace graybat {

  namespace pattern {

	struct PatternSkeleton {

		// Functor which returns a desired graph
		GraphDescription operator()(){
	};

  } /* pattern */

} /* graybat */

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

## Further Links ##

- graybat::pattern::FullyConnected
- graybat::pattern::GridDiagonal
- graybat::pattern::Grid
- graybat::pattern::HyperCube
- graybat::pattern::InStar
- graybat::pattern::OutStar
- graybat::pattern::BiStar
- graybat::pattern::EdgeLess
- graybat::pattern::Ring
- graybat::pattern::None

*/
