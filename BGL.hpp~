#pragma once
#include <boost/graph/graph_traits.hpp>
#include <boost/graph/adjacency_list.hpp>
#include <tuple>
#include <vector>

#include <types.hpp>

template <class T_VertexProperty, class T_EdgeProperty = boost::no_property>
class BGL {
public:
    typedef T_VertexProperty   VertexProperty;
    typedef T_EdgeProperty     EdgeProperty;

private:
    typedef boost::adjacency_list<boost::vecS, 
				  boost::vecS, 
				  boost::bidirectionalS, 
				  VertexProperty,
				  EdgeProperty> Graph;

    Graph graph;

    typedef typename boost::graph_traits<Graph>::in_edge_iterator   InEdgeIter;
    typedef typename boost::graph_traits<Graph>::out_edge_iterator  OutEdgeIter;
    typedef typename boost::graph_traits<Graph>::adjacency_iterator AdjacentVertexIter;
    typedef typename boost::graph_traits<Graph>::vertex_iterator    AllVertexIter;

public:
    typedef typename Graph::vertex_descriptor Vertex;
    typedef typename Graph::edge_descriptor   Edge;
    template <typename T> using               Container = std::vector<T>;
    
    BGL(std::vector<std::pair<Vertex, Vertex> > edges, const unsigned numVertices){
	graph = Graph(numVertices);

	for(auto e: edges){
	    boost::add_edge(e.first, e.second, graph);
	}

	// Bind vertex_descriptor and VertexProperty.uuid;
	for(unsigned i = 0; i < boost::num_vertices(graph); ++i){
	    setVertexProperty(boost::vertex(i, graph), VertexProperty(i));
	}

    }

    Container<Vertex> getVertices(){
	AllVertexIter vi, vi_end;
	std::tie(vi, vi_end) =  boost::vertices(graph);
	return Container<Vertex>(vi, vi_end);
    }

    VertexProperty getVertexProperty(Vertex vertex){
	return graph[vertex];
    }

    void setVertexProperty(Vertex vertex, VertexProperty value){
	graph[vertex] = value;
    }
  
    EdgeProperty getEdgeProperty(Edge edge){
	return graph[edge];
    }

    Container<Edge> getInEdges(Vertex vertex){
	InEdgeIter ei, ei_end;
	std::tie(ei, ei_end) = boost::in_edges(vertex, graph);
	return Container<Edge> (ei, ei_end);
    }

    Container<Edge> getOutEdges(Vertex vertex){
	OutEdgeIter ei, ei_end;
	std::tie(ei, ei_end) = boost::out_edges(vertex, graph);
	return Container<Edge> (ei, ei_end);
    }

    Vertex getEdgeTarget(Edge edge){
	return boost::target(edge, graph);
    }

    Vertex getEdgeSource(Edge edge){
	return boost::source(edge, graph);
    }

};
